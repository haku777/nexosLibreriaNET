// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nexos_Libreria_API.DataAccess;

#nullable disable

namespace Nexos_Libreria_API.DataAccess.Migrations
{
    [DbContext(typeof(LibreriaContext))]
    [Migration("20230821000509_migration_v3")]
    partial class migration_v3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Nexos_Libreria_API.DataAccess.Entity.Autores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ciudad_procedencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo_electronico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha_nacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre_completo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Autores", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ciudad_procedencia = "Japan",
                            Correo_electronico = "jimmy1076667239@gmail.com",
                            Fecha_nacimiento = new DateTime(2023, 8, 20, 19, 5, 9, 243, DateTimeKind.Local).AddTicks(5810),
                            Nombre_completo = "haku"
                        },
                        new
                        {
                            Id = 2,
                            Ciudad_procedencia = "Japan",
                            Correo_electronico = "v@v.com",
                            Fecha_nacimiento = new DateTime(2023, 8, 20, 19, 5, 9, 243, DateTimeKind.Local).AddTicks(5823),
                            Nombre_completo = "Violet"
                        });
                });

            modelBuilder.Entity("Nexos_Libreria_API.DataAccess.Entity.Libros", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id_Autor")
                        .HasColumnType("int");

                    b.Property<int>("Numero_de_paginas")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_Autor");

                    b.ToTable("Libros", (string)null);
                });

            modelBuilder.Entity("Nexos_Libreria_API.DataAccess.Entity.Libros", b =>
                {
                    b.HasOne("Nexos_Libreria_API.DataAccess.Entity.Autores", "Autor")
                        .WithMany()
                        .HasForeignKey("Id_Autor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");
                });
#pragma warning restore 612, 618
        }
    }
}
